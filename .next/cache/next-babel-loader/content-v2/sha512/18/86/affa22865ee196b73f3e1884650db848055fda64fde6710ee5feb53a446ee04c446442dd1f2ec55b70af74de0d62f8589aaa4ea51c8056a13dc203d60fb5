{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\React Udemy\\\\Meetup page Nextjs\\\\store\\\\auth-context.js\";\nimport React, { useEffect, useState, useCallback, useContext } from \"react\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\nlet logoutTimer;\n\nconst calculateTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingTime = adjExpirationTime - currentTime;\n  return remainingTime;\n};\n\nexport const AuthContextProvider = props => {\n  const tokenData = retreiveToken();\n  let initializeToken;\n\n  if (tokenData) {\n    initializeToken = tokenData.token;\n  }\n\n  const {\n    0: token,\n    1: setToken\n  } = useState(initializeToken);\n  const userIsLoggedIn = !!token;\n  const logOutHandler = useCallback(() => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  }, []);\n\n  const logInHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expirationTime\", expirationTime);\n    const remainingDuration = calculateTime(expirationTime);\n    logoutTimer = setTimeout(logOutHandler, remainingDuration);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      logoutTimer = setTimeout(logOutHandler, tokenData.duration);\n    }\n  }, [tokenData, logOutHandler]);\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: logInHandler,\n    logout: logOutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }, this);\n};\nexport default AuthContext;","map":{"version":3,"sources":["F:/React Udemy/Meetup page Nextjs/store/auth-context.js"],"names":["React","useEffect","useState","useCallback","useContext","AuthContext","createContext","token","isLoggedIn","login","logout","logoutTimer","calculateTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingTime","AuthContextProvider","props","tokenData","retreiveToken","initializeToken","setToken","userIsLoggedIn","logOutHandler","localStorage","removeItem","clearTimeout","logInHandler","setItem","remainingDuration","setTimeout","duration","contextValue","children"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,EAAiDC,UAAjD,QAAmE,OAAnE;AACA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,CAAoB;AACtCC,EAAAA,KAAK,EAAE,EAD+B;AAEtCC,EAAAA,UAAU,EAAE,KAF0B;AAGtCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;AAItCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB;AAQA,IAAIC,WAAJ;;AACA,MAAMC,aAAa,GAAIC,cAAD,IAAoB;AACtC,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B;AACA,QAAME,aAAa,GAAGD,iBAAiB,GAAGH,WAA1C;AACA,SAAOI,aAAP;AACD,CALH;;AAQA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAC1C,QAAMC,SAAS,GAAGC,aAAa,EAA/B;AACA,MAAIC,eAAJ;;AACA,MAAIF,SAAJ,EAAe;AACbE,IAAAA,eAAe,GAAGF,SAAS,CAACd,KAA5B;AACD;;AAED,QAAM;AAAA,OAACA,KAAD;AAAA,OAAQiB;AAAR,MAAoBtB,QAAQ,CAACqB,eAAD,CAAlC;AACA,QAAME,cAAc,GAAG,CAAC,CAAClB,KAAzB;AACA,QAAMmB,aAAa,GAAGvB,WAAW,CAAC,MAAM;AACtCqB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAG,IAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAD,IAAAA,YAAY,CAACC,UAAb,CAAwB,gBAAxB;;AAEA,QAAIjB,WAAJ,EAAiB;AACfkB,MAAAA,YAAY,CAAClB,WAAD,CAAZ;AACD;AACF,GARgC,EAQ9B,EAR8B,CAAjC;;AASA,QAAMmB,YAAY,GAAG,CAACvB,KAAD,EAAQM,cAAR,KAA2B;AAC9CW,IAAAA,QAAQ,CAACjB,KAAD,CAAR;AAEAoB,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BxB,KAA9B;AACAoB,IAAAA,YAAY,CAACI,OAAb,CAAqB,gBAArB,EAAuClB,cAAvC;AACA,UAAMmB,iBAAiB,GAAGpB,aAAa,CAACC,cAAD,CAAvC;AACAF,IAAAA,WAAW,GAAGsB,UAAU,CAACP,aAAD,EAAgBM,iBAAhB,CAAxB;AAED,GARD;;AASA/B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGoB,SAAH,EAAa;AACbV,MAAAA,WAAW,GAAGsB,UAAU,CAACP,aAAD,EAAgBL,SAAS,CAACa,QAA1B,CAAxB;AACC;AACF,GAJQ,EAIN,CAACb,SAAD,EAAYK,aAAZ,CAJM,CAAT;AAMA,QAAMS,YAAY,GAAG;AACnB5B,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,UAAU,EAAEiB,cAFO;AAGnBhB,IAAAA,KAAK,EAAEqB,YAHY;AAInBpB,IAAAA,MAAM,EAAEgB;AAJW,GAArB;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAES,YAA7B;AAAA,cACGf,KAAK,CAACgB;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5CI;AAiDP,eAAe/B,WAAf","sourcesContent":["\r\nimport React, { useEffect, useState, useCallback,useContext } from \"react\";\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\n\r\nlet logoutTimer;\r\nconst calculateTime = (expirationTime) => {\r\n    const currentTime = new Date().getTime();\r\n    const adjExpirationTime = new Date(expirationTime).getTime();\r\n    const remainingTime = adjExpirationTime - currentTime;\r\n    return remainingTime;\r\n  };\r\n  \r\n  \r\nexport const AuthContextProvider = (props) => {\r\n    const tokenData = retreiveToken();\r\n    let initializeToken;\r\n    if (tokenData) {\r\n      initializeToken = tokenData.token;\r\n    }\r\n  \r\n    const [token, setToken] = useState(initializeToken);\r\n    const userIsLoggedIn = !!token;\r\n    const logOutHandler = useCallback(() => {\r\n      setToken(null);\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"expirationTime\");\r\n      \r\n      if (logoutTimer) {\r\n        clearTimeout(logoutTimer);\r\n      }\r\n    }, []);\r\n    const logInHandler = (token, expirationTime) => {\r\n      setToken(token);\r\n      \r\n      localStorage.setItem(\"token\", token);\r\n      localStorage.setItem(\"expirationTime\", expirationTime);\r\n      const remainingDuration = calculateTime(expirationTime);\r\n      logoutTimer = setTimeout(logOutHandler, remainingDuration);\r\n     \r\n    };\r\n    useEffect(() => {\r\n      if(tokenData){\r\n      logoutTimer = setTimeout(logOutHandler, tokenData.duration);\r\n      }\r\n    }, [tokenData, logOutHandler]);\r\n  \r\n    const contextValue = {\r\n      token: token,\r\n      isLoggedIn: userIsLoggedIn,\r\n      login: logInHandler,\r\n      logout: logOutHandler,\r\n    };\r\n    return (\r\n      <AuthContext.Provider value={contextValue}>\r\n        {props.children}\r\n      </AuthContext.Provider>\r\n    );\r\n  };\r\n\r\n  \r\n\r\n  \r\nexport default AuthContext;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}